var _cslms$cs_server$Forms_JsonDecode$jsonField = {
	id: '',
	value: '',
	label: 'Input',
	inputType: _cslms$cs_server$Forms_Types$Text,
	helpText: _elm_lang$core$Maybe$Nothing,
	required: false,
	placeholder: _elm_lang$core$Maybe$Nothing,
	$default: _elm_lang$core$Maybe$Nothing,
	validators: {ctor: '[]'},
	errors: _cslms$cs_server$Forms_Validation$Valid
};
var _cslms$cs_server$Forms_JsonDecode$jsonForm = {
	action: _elm_lang$core$Maybe$Nothing,
	fields: {ctor: '[]'}
};
var _cslms$cs_server$Forms_JsonDecode$validation = function () {
	var convert = function (raw) {
		var _p0 = raw;
		if (_p0.ctor === 'Just') {
			return _elm_lang$core$Json_Decode$succeed(
				_cslms$cs_server$Forms_Validation$Errors(_p0._0));
		} else {
			return _elm_lang$core$Json_Decode$succeed(_cslms$cs_server$Forms_Validation$Valid);
		}
	};
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		convert,
		_elm_lang$core$Json_Decode$nullable(
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
}();
var _cslms$cs_server$Forms_JsonDecode$validator = function () {
	var convert = function (x) {
		var dic = _elm_lang$core$Dict$fromList(x);
		var name = _cslms$cs_server$Forms_Value$toString(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_cslms$cs_server$Forms_Value$String(''),
				A2(_elm_lang$core$Dict$get, 'validator', dic)));
		var msg = _cslms$cs_server$Forms_Value$toString(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_cslms$cs_server$Forms_Value$String('Error'),
				A2(_elm_lang$core$Dict$get, 'msg', dic)));
		var opts = _elm_lang$core$Dict$toList(
			A2(
				_elm_lang$core$Dict$remove,
				'msg',
				A2(_elm_lang$core$Dict$remove, 'validator', dic)));
		var optsList = A2(
			_elm_lang$core$List$map,
			function (_p1) {
				var _p2 = _p1;
				return {
					ctor: '_Tuple2',
					_0: _p2._0,
					_1: _cslms$cs_server$Forms_Value$toString(_p2._1)
				};
			},
			opts);
		var val = _cslms$cs_server$Forms_Validation$fromInfo(
			{ctor: '_Tuple3', _0: name, _1: msg, _2: opts});
		var _p3 = val;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(_p3._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid validator: ',
					_elm_lang$core$Basics$toString(x)));
		}
	};
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		convert,
		_elm_lang$core$Json_Decode$keyValuePairs(_cslms$cs_server$Forms_Value$jsonDecoder));
}();
var _cslms$cs_server$Forms_JsonDecode$inputType = function () {
	var convert = function (raw) {
		var _p4 = _cslms$cs_server$Forms_Types$stringToInputType(raw);
		if (_p4.ctor === 'Just') {
			return _elm_lang$core$Json_Decode$succeed(_p4._0);
		} else {
			return _elm_lang$core$Json_Decode$fail(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid input type: \'',
					A2(_elm_lang$core$Basics_ops['++'], raw, '\'.')));
		}
	};
	return A2(_elm_lang$core$Json_Decode$andThen, convert, _elm_lang$core$Json_Decode$string);
}();
var _cslms$cs_server$Forms_JsonDecode$field = A4(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
	'placeholder',
	_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
	_elm_lang$core$Maybe$Nothing,
	A4(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
		'helpText',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
		_elm_lang$core$Maybe$Nothing,
		A4(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
			'default',
			_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string),
			_elm_lang$core$Maybe$Nothing,
			A4(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
				'errors',
				_cslms$cs_server$Forms_JsonDecode$validation,
				_cslms$cs_server$Forms_Validation$Valid,
				A4(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
					'validators',
					_elm_lang$core$Json_Decode$list(_cslms$cs_server$Forms_JsonDecode$validator),
					{ctor: '[]'},
					A4(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
						'required',
						_elm_lang$core$Json_Decode$bool,
						true,
						A4(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
							'inputType',
							_cslms$cs_server$Forms_JsonDecode$inputType,
							_cslms$cs_server$Forms_Types$Text,
							A4(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
								'label',
								_elm_lang$core$Json_Decode$string,
								'Input',
								A4(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$optional,
									'value',
									_elm_lang$core$Json_Decode$string,
									'',
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'id',
										_elm_lang$core$Json_Decode$string,
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_cslms$cs_server$Forms_Types$Field)))))))))));
var _cslms$cs_server$Forms_JsonDecode$form = A3(
	_elm_lang$core$Json_Decode$map2,
	_cslms$cs_server$Forms_Types$Form,
	A2(
		_elm_lang$core$Json_Decode$field,
		'action',
		_elm_lang$core$Json_Decode$nullable(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode$field,
		'fields',
		_elm_lang$core$Json_Decode$list(_cslms$cs_server$Forms_JsonDecode$field)));
var _cslms$cs_server$Forms_JsonDecode$fromJson = function (json) {
	return A2(_elm_lang$core$Json_Decode$decodeString, _cslms$cs_server$Forms_JsonDecode$form, json);
};
