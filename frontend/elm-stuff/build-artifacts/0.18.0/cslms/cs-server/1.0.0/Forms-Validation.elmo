var _cslms$cs_server$Forms_Validation$validatorInfo = function (val) {
	var _p0 = val;
	switch (_p0.ctor) {
		case 'Numeric':
			return {
				ctor: '_Tuple3',
				_0: 'numeric',
				_1: _p0._0,
				_2: {ctor: '[]'}
			};
		case 'NotEmpty':
			return {
				ctor: '_Tuple3',
				_0: 'not-empty',
				_1: _p0._0,
				_2: {ctor: '[]'}
			};
		case 'Email':
			return {
				ctor: '_Tuple3',
				_0: 'is-email',
				_1: _p0._0,
				_2: {ctor: '[]'}
			};
		case 'Url':
			return {
				ctor: '_Tuple3',
				_0: 'is-url',
				_1: _p0._0,
				_2: {ctor: '[]'}
			};
		case 'Extensions':
			return {
				ctor: '_Tuple3',
				_0: 'extensions',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'extensions',
						_1: _cslms$cs_server$Forms_Value$List(
							A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Value$String, _p0._1.extensions))
					},
					_1: {ctor: '[]'}
				}
			};
		case 'Regex':
			return {
				ctor: '_Tuple3',
				_0: 'regex',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'value',
						_1: _cslms$cs_server$Forms_Value$String(_p0._1.value)
					},
					_1: {ctor: '[]'}
				}
			};
		case 'MinLength':
			return {
				ctor: '_Tuple3',
				_0: 'min-length',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'value',
						_1: _cslms$cs_server$Forms_Value$Int(_p0._1.value)
					},
					_1: {ctor: '[]'}
				}
			};
		case 'MaxLength':
			return {
				ctor: '_Tuple3',
				_0: 'max-length',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'value',
						_1: _cslms$cs_server$Forms_Value$Int(_p0._1.value)
					},
					_1: {ctor: '[]'}
				}
			};
		case 'MinValue':
			return {
				ctor: '_Tuple3',
				_0: 'min-value',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'value',
						_1: _cslms$cs_server$Forms_Value$Float(_p0._1.value)
					},
					_1: {ctor: '[]'}
				}
			};
		case 'MaxValue':
			return {
				ctor: '_Tuple3',
				_0: 'max-value',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'value',
						_1: _cslms$cs_server$Forms_Value$Float(_p0._1.value)
					},
					_1: {ctor: '[]'}
				}
			};
		default:
			return {
				ctor: '_Tuple3',
				_0: 'decimal',
				_1: _p0._0,
				_2: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'places',
						_1: _cslms$cs_server$Forms_Value$Int(_p0._1.places)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'size',
							_1: _cslms$cs_server$Forms_Value$Int(_p0._1.size)
						},
						_1: {ctor: '[]'}
					}
				}
			};
	}
};
var _cslms$cs_server$Forms_Validation$ValueOpt = function (a) {
	return {value: a};
};
var _cslms$cs_server$Forms_Validation$ExtensionsOpt = function (a) {
	return {extensions: a};
};
var _cslms$cs_server$Forms_Validation$DecimalOpt = F2(
	function (a, b) {
		return {places: a, size: b};
	});
var _cslms$cs_server$Forms_Validation$EmptyOpt = {};
var _cslms$cs_server$Forms_Validation$MaxValue = F2(
	function (a, b) {
		return {ctor: 'MaxValue', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$maxValue = F2(
	function (x, msg) {
		return A2(
			_cslms$cs_server$Forms_Validation$MaxValue,
			msg,
			_cslms$cs_server$Forms_Validation$ValueOpt(x));
	});
var _cslms$cs_server$Forms_Validation$MinValue = F2(
	function (a, b) {
		return {ctor: 'MinValue', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$minValue = F2(
	function (x, msg) {
		return A2(
			_cslms$cs_server$Forms_Validation$MinValue,
			msg,
			_cslms$cs_server$Forms_Validation$ValueOpt(x));
	});
var _cslms$cs_server$Forms_Validation$MaxLength = F2(
	function (a, b) {
		return {ctor: 'MaxLength', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$maxLength = F2(
	function (x, msg) {
		return A2(
			_cslms$cs_server$Forms_Validation$MaxLength,
			msg,
			_cslms$cs_server$Forms_Validation$ValueOpt(x));
	});
var _cslms$cs_server$Forms_Validation$MinLength = F2(
	function (a, b) {
		return {ctor: 'MinLength', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$minLength = F2(
	function (x, msg) {
		return A2(
			_cslms$cs_server$Forms_Validation$MinLength,
			msg,
			_cslms$cs_server$Forms_Validation$ValueOpt(x));
	});
var _cslms$cs_server$Forms_Validation$Regex = F2(
	function (a, b) {
		return {ctor: 'Regex', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$regex = F2(
	function (re, msg) {
		return A2(
			_cslms$cs_server$Forms_Validation$Regex,
			msg,
			_cslms$cs_server$Forms_Validation$ValueOpt(re));
	});
var _cslms$cs_server$Forms_Validation$Extensions = F2(
	function (a, b) {
		return {ctor: 'Extensions', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$extensions = F2(
	function (exts, msg) {
		return A2(
			_cslms$cs_server$Forms_Validation$Extensions,
			msg,
			_cslms$cs_server$Forms_Validation$ExtensionsOpt(exts));
	});
var _cslms$cs_server$Forms_Validation$Decimal = F2(
	function (a, b) {
		return {ctor: 'Decimal', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$Url = F2(
	function (a, b) {
		return {ctor: 'Url', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$Email = F2(
	function (a, b) {
		return {ctor: 'Email', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$email = function (msg) {
	return A2(
		_cslms$cs_server$Forms_Validation$Email,
		msg,
		{});
};
var _cslms$cs_server$Forms_Validation$url = function (msg) {
	return A2(
		_cslms$cs_server$Forms_Validation$Email,
		msg,
		{});
};
var _cslms$cs_server$Forms_Validation$Numeric = F2(
	function (a, b) {
		return {ctor: 'Numeric', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$numeric = function (msg) {
	return A2(
		_cslms$cs_server$Forms_Validation$Numeric,
		msg,
		{});
};
var _cslms$cs_server$Forms_Validation$NotEmpty = F2(
	function (a, b) {
		return {ctor: 'NotEmpty', _0: a, _1: b};
	});
var _cslms$cs_server$Forms_Validation$notEmpty = function (msg) {
	return A2(
		_cslms$cs_server$Forms_Validation$NotEmpty,
		msg,
		{});
};
var _cslms$cs_server$Forms_Validation$fromInfo = function (_p1) {
	var _p2 = _p1;
	var _p10 = _p2._2;
	var _p9 = _p2;
	var _p8 = _p2._1;
	var toExtensions = function (v) {
		var _p3 = v;
		if (_p3.ctor === 'List') {
			return _elm_lang$core$Result$Ok(
				A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Value$toString, _p3._0));
		} else {
			return _elm_lang$core$Result$Err('');
		}
	};
	var single = F2(
		function (field, opts) {
			var _p4 = opts;
			if (((_p4.ctor === '::') && (_p4._0.ctor === '_Tuple2')) && (_p4._1.ctor === '[]')) {
				return _elm_lang$core$Maybe$Just(_p4._0._1);
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		});
	var extract = F3(
		function (field, conv, opts) {
			var _p5 = A2(single, field, opts);
			if (_p5.ctor === 'Just') {
				return conv(_p5._0);
			} else {
				return _elm_lang$core$Result$Err('');
			}
		});
	var $try = F3(
		function (factory, opts, err) {
			var _p6 = opts;
			if (_p6.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(factory, _p6._0, err));
			} else {
				return _elm_lang$core$Result$Err(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'invalid info: ',
						_elm_lang$core$Basics$toString(_p9)));
			}
		});
	var _p7 = _p2._0;
	switch (_p7) {
		case 'numeric':
			return _elm_lang$core$Result$Ok(
				_cslms$cs_server$Forms_Validation$numeric(_p8));
		case 'not-empty':
			return _elm_lang$core$Result$Ok(
				_cslms$cs_server$Forms_Validation$notEmpty(_p8));
		case 'is-email':
			return _elm_lang$core$Result$Ok(
				_cslms$cs_server$Forms_Validation$email(_p8));
		case 'is-url':
			return _elm_lang$core$Result$Ok(
				_cslms$cs_server$Forms_Validation$url(_p8));
		case 'extensions':
			return A3(
				$try,
				_cslms$cs_server$Forms_Validation$extensions,
				A3(extract, 'extensions', toExtensions, _p10),
				_p8);
		case 'regex':
			return A3(
				$try,
				_cslms$cs_server$Forms_Validation$regex,
				A3(
					extract,
					'value',
					function (x) {
						return _elm_lang$core$Result$Ok(
							_cslms$cs_server$Forms_Value$toString(x));
					},
					_p10),
				_p8);
		case 'min-length':
			return A3(
				$try,
				_cslms$cs_server$Forms_Validation$minLength,
				A3(extract, 'value', _cslms$cs_server$Forms_Value$toInt, _p10),
				_p8);
		case 'max-length':
			return A3(
				$try,
				_cslms$cs_server$Forms_Validation$maxLength,
				A3(extract, 'value', _cslms$cs_server$Forms_Value$toInt, _p10),
				_p8);
		case 'min-value':
			return A3(
				$try,
				_cslms$cs_server$Forms_Validation$minValue,
				A3(extract, 'value', _cslms$cs_server$Forms_Value$toFloat, _p10),
				_p8);
		case 'max-value':
			return A3(
				$try,
				_cslms$cs_server$Forms_Validation$maxValue,
				A3(extract, 'value', _cslms$cs_server$Forms_Value$toFloat, _p10),
				_p8);
		default:
			return _elm_lang$core$Result$Err(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'invalid info: ',
					_elm_lang$core$Basics$toString(_p9)));
	}
};
var _cslms$cs_server$Forms_Validation$Errors = function (a) {
	return {ctor: 'Errors', _0: a};
};
var _cslms$cs_server$Forms_Validation$Valid = {ctor: 'Valid'};
var _cslms$cs_server$Forms_Validation$validate = F2(
	function (val, x) {
		var validateNumericOp = F4(
			function (x, op, y, err) {
				var x_num = _elm_lang$core$String$toFloat(x);
				var _p11 = x_num;
				if (_p11.ctor === 'Ok') {
					return A2(op, _p11._0, y) ? _cslms$cs_server$Forms_Validation$Errors(
						{
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						}) : _cslms$cs_server$Forms_Validation$Valid;
				} else {
					return _cslms$cs_server$Forms_Validation$Errors(
						{
							ctor: '::',
							_0: err,
							_1: {ctor: '[]'}
						});
				}
			});
		var _p12 = val;
		switch (_p12.ctor) {
			case 'NotEmpty':
				return _elm_lang$core$String$isEmpty(x) ? _cslms$cs_server$Forms_Validation$Valid : _cslms$cs_server$Forms_Validation$Errors(
					{
						ctor: '::',
						_0: _p12._0,
						_1: {ctor: '[]'}
					});
			case 'Numeric':
				var _p13 = _elm_lang$core$String$toFloat(x);
				if (_p13.ctor === 'Ok') {
					return _cslms$cs_server$Forms_Validation$Valid;
				} else {
					return _cslms$cs_server$Forms_Validation$Errors(
						{
							ctor: '::',
							_0: _p12._0,
							_1: {ctor: '[]'}
						});
				}
			case 'MinLength':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(x),
					_p12._1.value) < 0) ? _cslms$cs_server$Forms_Validation$Errors(
					{
						ctor: '::',
						_0: _p12._0,
						_1: {ctor: '[]'}
					}) : _cslms$cs_server$Forms_Validation$Valid;
			case 'MaxLength':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$String$length(x),
					_p12._1.value) > 0) ? _cslms$cs_server$Forms_Validation$Errors(
					{
						ctor: '::',
						_0: _p12._0,
						_1: {ctor: '[]'}
					}) : _cslms$cs_server$Forms_Validation$Valid;
			case 'MinValue':
				return A4(
					validateNumericOp,
					x,
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
						}),
					_p12._1.value,
					_p12._0);
			case 'MaxValue':
				return A4(
					validateNumericOp,
					x,
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
						}),
					_p12._1.value,
					_p12._0);
			default:
				return _cslms$cs_server$Forms_Validation$Valid;
		}
	});
var _cslms$cs_server$Forms_Validation$validateBatch = F2(
	function (validators, data) {
		var reducer = F2(
			function (r1, r2) {
				var _p14 = {ctor: '_Tuple2', _0: r1, _1: r2};
				if (_p14._0.ctor === 'Valid') {
					if (_p14._1.ctor === 'Valid') {
						return _cslms$cs_server$Forms_Validation$Valid;
					} else {
						return r2;
					}
				} else {
					if (_p14._1.ctor === 'Valid') {
						return r1;
					} else {
						return _cslms$cs_server$Forms_Validation$Errors(
							A2(_elm_lang$core$Basics_ops['++'], _p14._0._0, _p14._1._0));
					}
				}
			});
		var results = A2(
			_elm_lang$core$List$map,
			function (validator) {
				return A2(_cslms$cs_server$Forms_Validation$validate, validator, data);
			},
			validators);
		return A3(_elm_lang$core$List$foldr, reducer, _cslms$cs_server$Forms_Validation$Valid, results);
	});
