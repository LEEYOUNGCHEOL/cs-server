var _cslms$cs_server$Forms_Value$nCmp = F3(
	function (v, op, num) {
		var _p0 = v;
		switch (_p0.ctor) {
			case 'Int':
				return A2(
					op,
					_elm_lang$core$Basics$toFloat(_p0._0),
					num);
			case 'Float':
				return A2(op, _p0._0, num);
			default:
				return false;
		}
	});
var _cslms$cs_server$Forms_Value$isEmpty = function (v) {
	var _p1 = v;
	switch (_p1.ctor) {
		case 'String':
			return _elm_lang$core$String$isEmpty(_p1._0);
		case 'Empty':
			return true;
		case 'List':
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(_p1._0),
				0);
		default:
			return false;
	}
};
var _cslms$cs_server$Forms_Value$toJson = function (v) {
	var _p2 = v;
	switch (_p2.ctor) {
		case 'Empty':
			return _elm_lang$core$Json_Encode$null;
		case 'String':
			return _elm_lang$core$Json_Encode$string(_p2._0);
		case 'Float':
			return _elm_lang$core$Json_Encode$float(_p2._0);
		case 'Int':
			return _elm_lang$core$Json_Encode$int(_p2._0);
		case 'Bool':
			return _elm_lang$core$Json_Encode$bool(_p2._0);
		default:
			return _elm_lang$core$Json_Encode$list(
				A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Value$toJson, _p2._0));
	}
};
var _cslms$cs_server$Forms_Value$toBool = function (v) {
	var _p3 = v;
	switch (_p3.ctor) {
		case 'Empty':
			return false;
		case 'Bool':
			return _p3._0;
		default:
			return true;
	}
};
var _cslms$cs_server$Forms_Value$toInt = function (v) {
	var _p4 = v;
	switch (_p4.ctor) {
		case 'Float':
			return _elm_lang$core$Result$Ok(
				_elm_lang$core$Basics$truncate(_p4._0));
		case 'Int':
			return _elm_lang$core$Result$Ok(_p4._0);
		default:
			return _elm_lang$core$Result$Err('value is not numeric');
	}
};
var _cslms$cs_server$Forms_Value$toFloat = function (v) {
	var _p5 = v;
	switch (_p5.ctor) {
		case 'Float':
			return _elm_lang$core$Result$Ok(_p5._0);
		case 'Int':
			return _elm_lang$core$Result$Ok(
				_elm_lang$core$Basics$toFloat(_p5._0));
		default:
			return _elm_lang$core$Result$Err('value is not numeric');
	}
};
var _cslms$cs_server$Forms_Value$toString = function (v) {
	var _p6 = v;
	switch (_p6.ctor) {
		case 'Empty':
			return '';
		case 'String':
			return _p6._0;
		case 'Float':
			return _elm_lang$core$Basics$toString(_p6._0);
		case 'Int':
			return _elm_lang$core$Basics$toString(_p6._0);
		case 'Bool':
			var _p7 = _p6._0;
			if (_p7 === true) {
				return 'true';
			} else {
				return 'false';
			}
		default:
			return _elm_lang$core$Basics$toString(
				A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Value$toString, _p6._0));
	}
};
var _cslms$cs_server$Forms_Value$List = function (a) {
	return {ctor: 'List', _0: a};
};
var _cslms$cs_server$Forms_Value$Float = function (a) {
	return {ctor: 'Float', _0: a};
};
var _cslms$cs_server$Forms_Value$Bool = function (a) {
	return {ctor: 'Bool', _0: a};
};
var _cslms$cs_server$Forms_Value$Int = function (a) {
	return {ctor: 'Int', _0: a};
};
var _cslms$cs_server$Forms_Value$String = function (a) {
	return {ctor: 'String', _0: a};
};
var _cslms$cs_server$Forms_Value$Empty = {ctor: 'Empty'};
var _cslms$cs_server$Forms_Value$jsonDecoder = function () {
	var listdec = function (x) {
		var reducer = F2(
			function (x, y) {
				var _p8 = {ctor: '_Tuple2', _0: x, _1: y};
				if (((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Ok')) && (_p8._1.ctor === 'Ok')) {
					return _elm_lang$core$Result$Ok(
						{ctor: '::', _0: _p8._0._0, _1: _p8._1._0});
				} else {
					return _elm_lang$core$Result$Err('invalid element');
				}
			});
		var lst = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Json_Decode$decodeValue(_cslms$cs_server$Forms_Value$jsonDecoder),
			x);
		var result = A3(
			_elm_lang$core$List$foldl,
			reducer,
			_elm_lang$core$Result$Ok(
				{ctor: '[]'}),
			lst);
		var _p9 = result;
		if (_p9.ctor === 'Ok') {
			return _elm_lang$core$Json_Decode$succeed(
				_cslms$cs_server$Forms_Value$List(_p9._0));
		} else {
			return _elm_lang$core$Json_Decode$fail('not a list');
		}
	};
	var succ = F2(
		function (f, x) {
			return _elm_lang$core$Json_Decode$succeed(
				f(x));
		});
	return _elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$andThen,
				succ(_cslms$cs_server$Forms_Value$String),
				_elm_lang$core$Json_Decode$string),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Json_Decode$andThen,
					succ(_cslms$cs_server$Forms_Value$Float),
					_elm_lang$core$Json_Decode$float),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Json_Decode$andThen,
						succ(_cslms$cs_server$Forms_Value$Int),
						_elm_lang$core$Json_Decode$int),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Json_Decode$andThen,
							succ(_cslms$cs_server$Forms_Value$Bool),
							_elm_lang$core$Json_Decode$bool),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Json_Decode$andThen,
								listdec,
								_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$value)),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Json_Decode$null(_cslms$cs_server$Forms_Value$Empty),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
}();
var _cslms$cs_server$Forms_Value$fromJson = function (v) {
	return A2(_elm_lang$core$Json_Decode$decodeValue, _cslms$cs_server$Forms_Value$jsonDecoder, v);
};
