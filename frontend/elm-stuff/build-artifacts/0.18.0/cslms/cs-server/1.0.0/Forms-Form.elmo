var _cslms$cs_server$Forms_Form$viewForm = function (model) {
	var button = A2(
		_elm_lang$html$Html$input,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_('submit'),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
	var fields = A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Fields$viewField, model.fields),
		{
			ctor: '::',
			_0: button,
			_1: {ctor: '[]'}
		});
	var attrs = A3(
		_cslms$cs_server$Forms_Utils$fwrapAppend,
		_elm_lang$html$Html_Attributes$action,
		model.action,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Events$onSubmit(
				_cslms$cs_server$Forms_Types$SubmitForm(model)),
			_1: {ctor: '[]'}
		});
	return A2(_elm_lang$html$Html$form, attrs, fields);
};
var _cslms$cs_server$Forms_Form$updateForm = F2(
	function (msg_, state) {
		var _p0 = msg_;
		switch (_p0.ctor) {
			case 'UpdateField':
				var forEach = F2(
					function (lst, func) {
						return A2(_elm_lang$core$List$map, func, lst);
					});
				var fields = A2(
					forEach,
					state.fields,
					function (x) {
						return _elm_lang$core$Native_Utils.eq(x.id, _p0._0) ? A2(_cslms$cs_server$Forms_Fields$setValue, _p0._1, x) : x;
					});
				return _elm_lang$core$Native_Utils.update(
					state,
					{fields: fields});
			case 'SubmitForm':
				var _p1 = _p0._0;
				var fields = A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Fields$validateField, _p1.fields);
				return _elm_lang$core$Native_Utils.update(
					_p1,
					{fields: fields});
			case 'RequestValidation':
				var fields = A2(
					_elm_lang$core$List$map,
					_cslms$cs_server$Forms_Fields$updateField(msg_),
					state.fields);
				return _elm_lang$core$Native_Utils.update(
					state,
					{fields: fields});
			default:
				var fields = A2(_elm_lang$core$List$map, _cslms$cs_server$Forms_Fields$validateField, state.fields);
				return _elm_lang$core$Native_Utils.update(
					state,
					{fields: fields});
		}
	});
var _cslms$cs_server$Forms_Form$setValues = F2(
	function (data, model) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				fields: A3(_elm_lang$core$List$map2, _cslms$cs_server$Forms_Fields$setValue, data, model.fields)
			});
	});
var _cslms$cs_server$Forms_Form$action = F2(
	function (url, form) {
		return _elm_lang$core$Native_Utils.update(
			form,
			{
				action: _elm_lang$core$Maybe$Just(url)
			});
	});
var _cslms$cs_server$Forms_Form$hasErrors = function (f) {
	return !A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.errors, _cslms$cs_server$Forms_Validation$Valid);
		},
		f.fields);
};
var _cslms$cs_server$Forms_Form$form = F2(
	function (opts, fields) {
		var applyAll = F2(
			function (opts, x) {
				var _p2 = opts;
				if (_p2.ctor === '[]') {
					return x;
				} else {
					return _p2._0(
						A2(applyAll, _p2._1, x));
				}
			});
		return A2(
			applyAll,
			opts,
			{action: _elm_lang$core$Maybe$Nothing, fields: fields});
	});
