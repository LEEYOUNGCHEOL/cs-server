var _cslms$cs_server$Django_Forms$viewErrors = function (errors) {
	var viewError = function (x) {
		return A2(
			_elm_lang$html$Html$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(x),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('error'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, viewError, errors));
};
var _cslms$cs_server$Django_Forms$addError = F2(
	function (error, entry) {
		return _elm_lang$core$Native_Utils.update(
			entry,
			{
				errors: A2(
					_elm_lang$core$Basics_ops['++'],
					entry.errors,
					{
						ctor: '::',
						_0: error,
						_1: {ctor: '[]'}
					})
			});
	});
var _cslms$cs_server$Django_Forms$formEntry = function (data) {
	return {
		data: data,
		errors: {ctor: '[]'}
	};
};
var _cslms$cs_server$Django_Forms$emptyData = function (field) {
	var _p0 = field.$default;
	if (_p0.ctor === 'Just') {
		return _elm_lang$core$Maybe$Just(
			_cslms$cs_server$Django_Forms$formEntry(_p0._0));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _cslms$cs_server$Django_Forms$viewInput = F2(
	function (_p1, data) {
		var _p2 = _p1;
		var children = function () {
			var _p3 = data;
			if (_p3.ctor === 'Just') {
				return {
					ctor: '::',
					_0: _elm_lang$html$Html$text(_p3._0.data),
					_1: {ctor: '[]'}
				};
			} else {
				return {ctor: '[]'};
			}
		}();
		var _p4 = _p2.inputType;
		if (_p4.ctor === 'Text') {
			return A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('text'),
					_1: {ctor: '[]'}
				},
				children);
		} else {
			return A2(
				_elm_lang$html$Html$input,
				{ctor: '[]'},
				children);
		}
	});
var _cslms$cs_server$Django_Forms$viewFormField = function (field) {
	return A2(
		_elm_lang$html$Html$label,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('form-field'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(_cslms$cs_server$Django_Forms$viewInput, field, _elm_lang$core$Maybe$Nothing),
			_1: {ctor: '[]'}
		});
};
var _cslms$cs_server$Django_Forms$default = F2(
	function (text, form) {
		return _elm_lang$core$Native_Utils.update(
			form,
			{
				$default: _elm_lang$core$Maybe$Just(text)
			});
	});
var _cslms$cs_server$Django_Forms$placeholder = F2(
	function (text, form) {
		return _elm_lang$core$Native_Utils.update(
			form,
			{
				placeholder: _elm_lang$core$Maybe$Just(text)
			});
	});
var _cslms$cs_server$Django_Forms$required = function (field) {
	return _elm_lang$core$Native_Utils.update(
		field,
		{required: true});
};
var _cslms$cs_server$Django_Forms$helpText = F2(
	function (text, field) {
		return _elm_lang$core$Native_Utils.update(
			field,
			{
				helpText: _elm_lang$core$Maybe$Just(text)
			});
	});
var _cslms$cs_server$Django_Forms$field = F2(
	function (label, type_) {
		return {
			label: label,
			inputType: type_,
			helpText: _elm_lang$core$Maybe$Nothing,
			required: false,
			placeholder: _elm_lang$core$Maybe$Nothing,
			$default: _elm_lang$core$Maybe$Nothing,
			validators: {ctor: '[]'}
		};
	});
var _cslms$cs_server$Django_Forms$view = function (form) {
	var fields = A2(_elm_lang$core$List$map, _cslms$cs_server$Django_Forms$viewFormField, form.fields);
	return A2(
		_elm_lang$html$Html$form,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$action(form.action),
			_1: {ctor: '[]'}
		},
		fields);
};
var _cslms$cs_server$Django_Forms$fields = F2(
	function (fields, form) {
		return _elm_lang$core$Native_Utils.update(
			form,
			{
				fields: A2(_elm_lang$core$Basics_ops['++'], form.fields, fields)
			});
	});
var _cslms$cs_server$Django_Forms$form = function (action) {
	return {
		action: action,
		uuid: '',
		fields: {ctor: '[]'}
	};
};
var _cslms$cs_server$Django_Forms$fromJson = function (data) {
	return _cslms$cs_server$Django_Forms$form('foo');
};
var _cslms$cs_server$Django_Forms$Form = F3(
	function (a, b, c) {
		return {action: a, uuid: b, fields: c};
	});
var _cslms$cs_server$Django_Forms$FormField = F7(
	function (a, b, c, d, e, f, g) {
		return {label: a, inputType: b, $default: c, helpText: d, placeholder: e, required: f, validators: g};
	});
var _cslms$cs_server$Django_Forms$FormEntry = F2(
	function (a, b) {
		return {data: a, errors: b};
	});
var _cslms$cs_server$Django_Forms$Errors = function (a) {
	return {ctor: 'Errors', _0: a};
};
var _cslms$cs_server$Django_Forms$Valid = {ctor: 'Valid'};
var _cslms$cs_server$Django_Forms$isNumber = F2(
	function (msg, data) {
		var n = _elm_lang$core$String$toFloat(data);
		var _p5 = n;
		if (_p5.ctor === 'Ok') {
			return _cslms$cs_server$Django_Forms$Valid;
		} else {
			return _cslms$cs_server$Django_Forms$Errors(
				{
					ctor: '::',
					_0: msg,
					_1: {ctor: '[]'}
				});
		}
	});
var _cslms$cs_server$Django_Forms$validate = F2(
	function (validators, data) {
		var reducer = F2(
			function (r1, r2) {
				var _p6 = {ctor: '_Tuple2', _0: r1, _1: r2};
				if (_p6._0.ctor === 'Valid') {
					if (_p6._1.ctor === 'Valid') {
						return _cslms$cs_server$Django_Forms$Valid;
					} else {
						return r2;
					}
				} else {
					if (_p6._1.ctor === 'Valid') {
						return r1;
					} else {
						return _cslms$cs_server$Django_Forms$Errors(
							A2(_elm_lang$core$Basics_ops['++'], _p6._0._0, _p6._1._0));
					}
				}
			});
		var results = A2(
			_elm_lang$core$List$map,
			function (f) {
				return f(data);
			},
			validators);
		return A3(_elm_lang$core$List$foldr, reducer, _cslms$cs_server$Django_Forms$Valid, results);
	});
var _cslms$cs_server$Django_Forms$Numeric = {ctor: 'Numeric'};
var _cslms$cs_server$Django_Forms$Text = {ctor: 'Text'};
