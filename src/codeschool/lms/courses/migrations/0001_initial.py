# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-13 00:51
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields
import wagtail.contrib.wagtailroutablepage.models
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0030_index_on_pagerevision_created_at'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('weekly_lessons', models.BooleanField(default=False, help_text='If true, the lesson spans a whole week. Othewise, each lesson would correspond to a single day/time slot.', verbose_name='weekly lessons')),
                ('accept_subscriptions', models.BooleanField(default=True, help_text='Set it to false to prevent new student subscriptions.', verbose_name='accept subscriptions')),
                ('is_public', models.BooleanField(default=False, help_text='If true, all students will be able to see the contents of the course. Most activities will not be available to non-subscribed students.', verbose_name='is it public?')),
                ('subscription_passphrase', models.CharField(blank=True, help_text='A passphrase/word that students must enter to subscribe in the course. Leave empty if no passphrase should be necessary.', max_length=140, verbose_name='subscription passphrase')),
                ('short_description', models.CharField(max_length=140)),
                ('description', wagtail.wagtailcore.fields.RichTextField()),
                ('activities_template', models.CharField(blank=True, choices=[('programming-beginner', 'A beginner programming course'), ('programming-intermediate', 'An intermediate programming course'), ('programming-marathon', 'A marathon-level programming course')], max_length=20)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.wagtailroutablepage.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='CourseList',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.wagtailroutablepage.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=100)),
                ('description', wagtail.wagtailcore.fields.RichTextField()),
                ('syllabus', wagtail.wagtailcore.fields.RichTextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.TextField(help_text='A brief description for the lesson.', verbose_name='title')),
                ('date', models.DateField(blank=True, help_text='Date scheduled for this lesson.', null=True, verbose_name='date')),
                ('calendar', modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.CalendarPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LessonPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.StreamField((('paragraph', wagtail.wagtailcore.blocks.RichTextBlock()),), blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week in which this class takes place.', verbose_name='weekday')),
                ('start', models.TimeField(blank=True, help_text='The time in which the class starts.', null=True, verbose_name='start')),
                ('end', models.TimeField(blank=True, help_text='The time in which the class ends.', null=True, verbose_name='ends')),
                ('room', models.CharField(blank=True, help_text='Name for the room in which this class takes place.', max_length=100, verbose_name='classroom')),
                ('course', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='courses.Course')),
            ],
            options={
                'ordering': ('weekday', 'start'),
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='page',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lesson', to='courses.LessonPage'),
        ),
        migrations.AddField(
            model_name='course',
            name='discipline',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='courses.Discipline'),
        ),
        migrations.AddField(
            model_name='course',
            name='staff',
            field=models.ManyToManyField(blank=True, related_name='courses_as_staff', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='students',
            field=models.ManyToManyField(blank=True, related_name='courses_as_student', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='courses_as_teacher', to=settings.AUTH_USER_MODEL),
        ),
    ]
